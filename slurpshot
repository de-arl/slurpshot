#!/bin/bash
# Simple screenshot script, dependencies: grim, bemenu, imv, jq, slurp
# Choose directory to save screenshots and viewer

SHOTPATH=$HOME
VIEWER=/usr/bin/imv-wayland

WINDOWS=`swaymsg -t get_tree | jq '.. | (.nodes? // empty)[] | select(.visible and .pid) | "\(.app_id) \(.rect.x),\(.rect.y) \(.rect.width)x\(.rect.height)"'`
FOCUSED=`swaymsg -t get_tree | jq '.. | (.nodes? // empty)[] | select(.focused and .pid) | .rect | "\(.x),\(.y) \(.width)x\(.height)"'`

CHOICE=`bemenu -n -m all -b -H 11 --tf=#ffffff --ff=#ffffff --hf=#4c7899 --fb=#000000 --tb=#000000 --nb=#000000 --hb=#000000 -p "Please select screenshot area:" << EOF
Fullscreen
Selection
Focus
$WINDOWS
Abort
EOF`

if [ $? = 1 ]; then exit 0; fi

FILENAME="${SHOTPATH}/screenshot-$(date +'%Y-%m-%d-%H%M%S.png')"
GRID=\"$(echo $CHOICE | awk ' {print $2,$3} ')

# Name printed when viewing screenshot, adjust if you edit FILENAME
FILENAME_SHORT=${FILENAME: -32}

if [ "$CHOICE" = Fullscreen ]
then
    grim "$FILENAME"
elif [ "$CHOICE" = Selection ]
then
    grim -g "$(slurp)" "$FILENAME"
elif [ "$CHOICE" = Focus ]
then
    grim -g "$(eval echo $FOCUSED)" "$FILENAME"
elif [ "$CHOICE" = Abort ]
then
    exit 0
else
    grim -g "$(eval echo $GRID)" "$FILENAME"
fi


WAHL=`bemenu -n -m all -b -H 11 --tf=#ffffff --ff=#ffffff --hf=#4c7899 --fb=#000000 --tb=#000000 --nb=#000000 --hb=#000000 -p "Screenshot taken" << EOF
View
Print and Save
Print and Discard
Save
Discard
EOF`

if [ $? = 1 ]; then rm $FILENAME & exit 0; fi

if [ "$WAHL" = View ]
then	
	$VIEWER $FILENAME &
	WAHL2=`bemenu -n -m all -b -H 11 --tf=#ffffff --ff=#ffffff --hf=#4c7899 --fb=#000000 --tb=#000000 --nb=#000000 --hb=#000000  -p "${FILENAME_SHORT}"<< EOF
	Save
    Print and Save
    Print and Discard
	Discard
EOF`
  if [ $? = 1 ]; then 
    rm $FILENAME &
    PID_VIEWER=$(pidof -s ${VIEWER})
    kill -9 ${PID_VIEWER};
    exit 0; 
  fi
	if [ $WAHL2 = Discard ]
	then
	        rm $FILENAME &
	        PID_VIEWER=$(pidof -s ${VIEWER})
	        kill -9 ${PID_VIEWER}
    elif [ "$WAHL2" = "Print and Save" ]
    then
            lpr $FILENAME &
	        kill -9 ${PID_VIEWER}
    elif [ "$WAHL2" = "Print and Discard" ]
    then
            lpr $FILENAME &
	        rm $FILENAME &
	        kill -9 ${PID_VIEWER}
	else
		PID_VIEWER=$(pidof -s ${VIEWER})
		kill -9 ${PID_VIEWER}
		true
	fi
elif [ "$WAHL" = Discard ]
then
	rm $FILENAME
elif [ "$WAHL" = "Print and Save" ]
    then
            lpr $FILENAME &
 elif [ "$WAHL" = "Print and Discard" ]
    then
            lpr $FILENAME 
	        rm $FILENAME &
else
	true
fi
exit 0
